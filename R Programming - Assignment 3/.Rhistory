'demo()'
'demo()'
help()
demo()
Hershey
Japanese
graphics
colors
glm.vr
lm.glm
smooth
base
help
a <- available.packages()
head(rownames(a),3)
clear
install.packages("KernSmooth")
library(KernSmooth)
add2 <- function(x, y) {
x + y
}
add2(3,5)
getwd()
aboveany <- function(x, y){
use <- x > y
x[use]
}
x <- 1:20
aboveany(x,3)
aboveany(x,13)
aboveany(x,21)
aboveany(x)
aboveany <- function(x, y = 10){
use <- x > y
x[use]
}
aboveany(x)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <-mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <-mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
rnorm(10)
rnorm(10)
rnorm(10)
cat("Hello ", "World")
cat("Hello", "World")
rm(list=ls())
getwed()
getwd()
setwd("./Dropbox/Third Plateau/Management/HR/Staff Files/Ari 2.0/Professional Development/Data Science Specialization/datasciencecoursera/R Programming - Assignment 3/")
list.files()
ls
ls()
a
list.files()
setwd("./rprog%2Fdata%2FProgAssignment3-data/")
list.files()
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
outcome_col <- numeric()
if (outcome == "heart attack") {
outcome_col <- 11
} else if (outcome == "heart failure"){
outcome_col <- 17
} else if (outcome == "pneumonia"){
outcome_col <- 23
} else {
stop("invalid outcome")
}
state_check <- grep(state, data[,7])
if (length(state_check) == 0) stop("invalid state")
## Return hospital name in that state with the given rank
## 30-day death rate
divide <- split(data, data$State)
byState <- data.frame(divide[grep(state, names(divide))])
rankedframe <- byState[ order(as.numeric(byState[,outcome_col]), byState[,2]), ]
if (num == "best") {return(rankedframe[1, 2])}
else if (num == "worst") {
natest <- nrow(rankedframe)
while (is.na(rankedframe[natest,outcome_col])) {
natest <- natest - 1
}
final <- rankedframe[natest,2]
return(final)}
rankedframe[num, 2]
}
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
divide <- split(data, data$State)
state <- "MD"
byState <- data.frame(divide[grep(state, names(divide))])
outcome_col <- 11
rankedframe <- byState[ order(as.numeric(byState[,outcome_col]), byState[,2]), ]
head(rankedframe)
rankedframe[1,2]
rankhospital("MD", "heart attack")
state <- "AK"
byState <- data.frame(divide[grep(state, names(divide))])
rankedframe <- byState[ order(as.numeric(byState[,outcome_col]), byState[,2]), ]
head(rankedframe)
length(divide)
data.frame("hello" = 1:4, "goodbye" = 1:3)
data.frame("hello" = 1:4, "goodbye" = 1:4)
names(divide)[i]
names(divide)[1]
names(divide)[2]
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
outcome_col <- numeric()
if (outcome == "heart attack") {
outcome_col <- 11
} else if (outcome == "heart failure"){
outcome_col <- 17
} else if (outcome == "pneumonia"){
outcome_col <- 23
} else {
stop("invalid outcome")
}
state_check <- grep(state, data[,7])
if (length(state_check) == 0) stop("invalid state")
## Return hospital name in that state with lowest 30-day death
## rate
subset <- split(data, data$State)
frame <- data.frame(subset[grep(state, names(subset))])
row_num <- which.min(frame[,outcome_col])
HName <- frame[row_num, 2]
HName
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
?which.min
rankhospital("NC", "heart attack", "worst")
byState <- data.frame(divide[grep("NC", names(divide))])
rankedframe <- byState[ order(as.numeric(byState[,outcome_col]), byState[,2]), ]
tail(rankedframe)
which.min(rankedframe[,11])
which.max(rankedframe[,11])
rankedframe[83,2]
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
outcome_col <- numeric()
if (outcome == "heart attack") {
outcome_col <- 11
} else if (outcome == "heart failure"){
outcome_col <- 17
} else if (outcome == "pneumonia"){
outcome_col <- 23
} else {
stop("invalid outcome")
}
state_check <- grep(state, data[,7])
if (length(state_check) == 0) stop("invalid state")
## Return hospital name in that state with the given rank
## 30-day death rate
divide <- split(data, data$State)
byState <- data.frame(divide[grep(state, names(divide))])
rankedframe <- byState[ order(as.numeric(byState[,outcome_col]), byState[,2]), ]
if (num == "best") {return(rankedframe[1, 2])}
else if (num == "worst") {
worst <- which.max(rankedframe[, outcome_col])
final <- rankedframe[worst,2]
return(final)}
rankedframe[num, 2]
}
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
rankhospital("NY", "heart attack", "best")
head(rankedframe)
final <- data.frame("State name" = 1:length(divide), "Best Hospital" =
1:length(divide))
final
final[1,2] <- rankhospital(names(divide)[1], "heart attack", "best")
final
final[1,1] <- names(divide)[1]
final
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
outcome_col <- numeric()
if (outcome == "heart attack") {
outcome_col <- 11
} else if (outcome == "heart failure"){
outcome_col <- 17
} else if (outcome == "pneumonia"){
outcome_col <- 23
} else {
stop("invalid outcome")
}
## For each state, find the hospital of the given rank
divide <- split(data, data$State)
final <- data.frame("State name" = 1:length(divide), "Best Hospital" =
1:length(divide))
for( i in 1:length(divide)){
final[i,2] <- rankhospital(names(divide)[i], outcome, num)
final[i,1] <- names(divide)[i]
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
final
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r
r <- rankall("pneumonia", "worst")
r
r <- rankall("heart failure", 10)
r
setwd("..")
ls()
rm(list =ls())
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile=quiz.csv, method = 'curl')
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="./quiz.csv", method = 'curl')
list.files()
read.csv("quiz.csv")
myCSV <- read.csv("quiz.csv")
myCSV$VAL
myCSV$VAL = 24
myCSV$VAL
myCSV <- read.csv("quiz.csv")
myCSV$VAL
library(data.table)
myTable <- read.table("quiz.csv")
myTable
rm myTable
rm "myTable""
myCSV[$VAL = 24]
first <- subset(myCSV, VAL = 24)
first
myTable <- data.table(myCSV)
load(data.table)
data.table
data.table()
install.packages("data.table")
myTable <- data.table(myCSV)
as.data.frame.table(myCSV)
myTable <- as.data.table(myCSV)
library(data.table)
myTable <- as.data.table(myCSV)
myTable[,table(VAL)]
rm(list=ls())
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "./EXCEL", method = 'curl')
load(xlsx)
install.packages("xlsx")
library(xlsx)
dat <- read.xlsx("EXCEL", rowIndex = 18:23, colIndex = 7:15)
library(xlsx)
install.packages("xlsx")
library(xlsx)
dat <- read.xlsx("EXCEL", rowIndex = 18:23, colIndex = 7:15)
sudo R CMD javareconf
install.packages("rJava",type='source')
library(xlsx)
library(XML)
install.packages("XML")
library(XML)
myXML <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = TRUE)
myXML <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternalNodes = TRUE)
myXML <- xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternalNodes = TRUE)
myXML
rootNode <- xmlRoot(myXML)
xpathSApply(rootNode, “//zipcode”, xmlValue)
xpathSApply(rootNode, “/zipcode”, xmlValue)
xpathSApply(rootNode, “zipcode”, xmlValue)
xpathSApply("//zipcode", xmlValue)
xmlSApply(rootNode, xmlValue)
?xpathSApply
xpathSApply(rootNode, “//zipcode” = 21231, xmlValue)
names(rootNode)
names(rootNode[[1]])
?xmlValue
